#
# TODOs, IDEAS, ...
#

#
# In Progress
#
# currently: define a new plugin registration interface
#
P: * support for mime typed plugins: let plugins specify for what kind of mime types they want to be executed:
    * text/* for all text types, text/css for all css files, application/json for json outputs(specify as regex for easy handling)
    * there can then be good support for other content types
    * a CSS minifier would then only receive text/css contents and could process @imports and such
P: * support weights for plugin registrations so plugins can be executed before plugins registered before them
P: * one shot plugins: allow a plugin to specify that it want's to only run once (start or end) -> LOGLEVEL eg
P: * support notation of dependencies between plugins, and escape methods
P: * allow plugins to declare them self as cachable (eg LOAD) -> fewer disk accesses and faster processing
    * don't run cachable plugins on cached resources?

#
# TODOs
#
 * define public regex pattern that matches on escape methods, validate registrations and allow plugins to use that public variable
 * add setOption && getOption function to control all available options through those 2 functions(store all options in an associative array)
 * TODO: sort & group ideas by topic and type
 * add Translation support (gettext)
 * process own documentation with the TE?
 * make debug modes session persistent
 * plugin to delete _all_ inline styles
 * plugin statistics to identify inefficient plugins
 * sane default escape methods
 * CSS minifier, debug mode
 * JavaScript minifier, debug mode
 * support JSON output
 * new direktive: FOREACH2D
 * Image sprite support (define sprite in XML and provide a chooser UI)
 * Image sprite -> CSS generator schould be able to generate the ui-icon* classes like in jQuery UI
 * Image Sprite Generator take folders with images and image sprite definition to create image sprite (build automation)
 * Template directive for image sprite based icons like: {IMAGE[ui]=disk} -> <span class="ui-icon ui-icon-disk"></span> or in general {IMAGE[namespace]=icon-name} -> HTML (with the help of the image sprite definition)
 * add sprite definitions for FAMFAMFAM icons, and jQuery UI (mobile?)
 * move all hardcoded template variable names to a configuration object (TE_ERRORS, HEADER_TEXT, ...)
 * add plugin interface for the LogMsg log buffer
 * allow getFile to be implemented by a plugin(read templates from database for example)
 * move all those option variables into an array -> easier to move configuration to another file
 * document callbacks inline
 * allow templates to be somewhere else (decouple template path from the root path - what to do with images and such??)
 * output with ob_start ob_gz_handler instead of manual gzencode
 * remove file dependency to TE_setup.php - allow those functions to be registered like plugins
 * move TE_error_handler back into the TemplateEngine class - didn't work last time for some reason(damn firelogger)
 * add a directory where cached outputs could be stored, so that the template engine could cache CSS minifications and gzipped contents for example
 * plugin interface to store cached files(eg database backend)
 * template support for escape methods: store into specially structured file in template folder? "TE_ESCAPE_METHODS.tpl" ?
  * for example: PROFILELINK=<a href="/profile/{NICK|URICOMPONENT}">{NICK}</a>
  * add a flag for escape methods to state that they support templating+arguments (so a TE_ESCAPE... file can be autogenerated)
 * support {ARRAY/SUBARRAY/VARIABLE} access?

#
# UPSTREAM BUGS / TODOS / QUESTIONS
#
 * coverage does not count magic __call coverage
 * coverage generation throws notices because of the usage of date without setting a timezone
 * @codeCoverageIgnore is ignored (the other variants too)
 * } after a return statement is considered as dead code
 * how to test functions registered with register_shutdown_function?
 * how to test output buffering? ob_start,...
 * PHPUnit adds its version to the coverage report, could add link too

# PHPUnit error
# test that was not expected to throw an exception threw
PHP Catchable fatal error:  Argument 2 passed to PHPUnit_Framework_TestResult::addError() must be an instance of Exception, instance of __PHP_Incomplete_Class given, called in /usr/share/php5/PEAR/PHPUnit/Util/PHP.php on line 235 and defined in /usr/share/php5/PEAR/PHPUnit/Framework/TestResult.php on line 237
